include:
  - local: .gitlab/jobs.yaml
  
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG != null
      when: never 
    - when: always

stages:
#  - Lint
  - Generate
#  - Sentry
#  - Extra

release template version:
  image: node:22.4.1-slim
  stage: Generate
  variables:
    SEMANTIC_RELEASE_DEPS: |
      {
        "type": "module",
        "scripts": {
          "release": "semantic-release"
        },
        "devDependencies": {
          "semantic-release": "^24.2.1",
          "@semantic-release/gitlab": "^13.2.4",
          "@semantic-release/changelog": "^6.0.3",
          "@semantic-release/git": "^10.0.1",
          "conventional-changelog-conventionalcommits": "^8.0.0",
          "conventional-commits-parser": "^6.0.0"
        }
      }
    GIT_AUTHOR_NAME: Semantic Release Bot
    GIT_COMMITTER_NAME: Semantic Release Bot
    GIT_COMMITTER_EMAIL: semantic-release-bot@devlab.co
    GIT_AUTHOR_EMAIL: semantic-release-bot@devlab.co
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - printf '%s' "$SEMANTIC_RELEASE_DEPS" > package.json
    - npm i
  script:
    - npx --yes semantic-release --branches "$CI_DEFAULT_BRANCH"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - templates/**/*
      when: always
    - when: never

generate pipelines:
  extends: .generate-pipelines
  stage: Generate

remove stale dev TF locks:
  image: $CONTAINER_REGISTRY_HOST/base/tools/deploy-toolbox:$DEPLOY_TOOLBOX_VERSION
  stage: Generate
  script:
    - bin/clean-stale-locks.py our-own-outbe-deploy-development-tf-state
  tags:
    - development-cluster
  allow_failure: true

# This job triggers the pipeline which is generated and triggers in its turn pipelines for every environment found
#trigger:
#  stage: Generate
#  needs:
#    - generate-pipelines
#  trigger:
#    include:
#      - artifact: .gitlab/generated.yaml
#        job: generate-pipelines
#    strategy: depend

# Hardcoded development env trigger job
development:
  stage: Generate
  needs:
    - generate pipelines
    - remove stale dev TF locks
  trigger:
    include:
      - artifact: .gitlab/generated-development.yaml
        job: generate pipelines
    strategy: depend

# Hardcoded integration env trigger job
integration:
  stage: Generate
  needs:
    - generate pipelines
    - remove stale dev TF locks
  trigger:
    include:
      - artifact: .gitlab/generated-integration.yaml
        job: generate pipelines
    strategy: depend

#.sentry:
#  stage: Sentry
#  image: $CONTAINER_REGISTRY_HOST/base/tools/deploy-toolbox-root:$DEPLOY_TOOLBOX_VERSION
#  before_script:
#    - cd stacks/sentry/$SENTRY_STACK
#    - terraform init -input=false
#
#sentry dev preview:
#  extends: .sentry
#  needs: []
#  variables:
#    SENTRY_STACK: development
#  rules:
#    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
#      changes:
#        paths:
#          - stacks/sentry/$SENTRY_STACK/*
#          - stacks/sentry/modules/**/*
#          - stacks/sentry/projects.yaml
#        compare_to: 'refs/heads/main'
#  script:
#    - terraform plan -input=false
#  tags:
#    - development-cluster
#
#sentry dev apply preview:
#  extends: .sentry
#  needs: []
#  variables:
#    SENTRY_STACK: development
#  rules:
#    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#      changes:
#        paths:
#          - stacks/sentry/$SENTRY_STACK/*
#          - stacks/sentry/modules/**/*
#          - stacks/sentry/projects.yaml
#  script:
#    - terraform plan -input=false
#  tags:
#    - development-cluster
#
#sentry dev apply:
#  extends: sentry dev apply preview
#  needs:
#    - sentry dev apply preview
#  when: manual
#  script:
#    - terraform apply -auto-approve -input=false
#  tags:
#    - development-cluster
#
#sentry prod preview:
#  extends: .sentry
#  needs: []
#  variables:
#    SENTRY_STACK: production
#  rules:
#    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
#      changes:
#        paths:
#          - stacks/sentry/$SENTRY_STACK/*
#          - stacks/sentry/modules/**/*
#          - stacks/sentry/projects.yaml
#        compare_to: 'refs/heads/main'
#  script:
#    - terraform plan -input=false
#  tags:
#    - production-cluster
#
#sentry prod apply preview:
#  extends: .sentry
#  needs: []
#  variables:
#    SENTRY_STACK: production
#  rules:
#    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#      changes:
#        paths:
#          - stacks/sentry/$SENTRY_STACK/*
#          - stacks/sentry/modules/**/*
#          - stacks/sentry/projects.yaml
#  script:
#    - terraform plan -input=false
#  tags:
#    - production-cluster
#
#sentry prod apply:
#  extends: sentry prod apply preview
#  needs:
#    - sentry prod apply preview
#  when: manual
#  script:
#    - terraform apply -auto-approve -input=false
#  tags:
#    - production-cluster

#.e2e-access:
#  stage: Extra
#  image: $CONTAINER_REGISTRY_HOST/base/tools/deploy-toolbox-root:$DEPLOY_TOOLBOX_VERSION
#  before_script:
#    - cd stacks/e2e-access
#    - terraform init -input=false
#
#E2E access preview:
#  extends: .e2e-access
#  needs: []
#  rules:
#    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
#      changes:
#        paths:
#          - stacks/e2e-access/**/*
#        compare_to: 'refs/heads/main'
#  script:
#    - terraform plan -input=false
#  tags:
#    - development-cluster
#
#E2E access apply:
#  extends: .e2e-access
#  needs: []
#  rules:
#    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#      changes:
#        paths:
#          - stacks/e2e-access/**/*
#  script:
#    - terraform apply -input=false -auto-approve
#  tags:
#    - development-cluster
