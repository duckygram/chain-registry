

.build-image:
  stage: build-image
  image: lorrodx/buildah-builder:latest
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      # If the pipeline is triggered by a tag, use the tag as the version
      # If the pipeline is triggered by a merge request, get the latest tag and use it as the version
      if [ -n "$CI_COMMIT_TAG" ]; then
      
        VERSION=$CI_COMMIT_TAG

        if [ -z "${VERSION}" ] || [ "${VERSION}" = "null" ]; then
          VERSION="0.0.1"
        fi
      
        echo "VERSION=${VERSION}"
      elif [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]; then
        # List all available tags for debugging purposes
        echo "Available tags (sorted by creation date):"
        git tag --sort=-creatordate
        
        # Attempt to retrieve the latest tag using a method that avoids SIGPIPE errors
        latest_tag=$(git for-each-ref --sort=-creatordate --count=1 --format='%(refname:short)' refs/tags)
        
        # Check if the command was successful and if a tag was found
        if [ $? -ne 0 ] || [ -z "$latest_tag" ]; then
            echo "Error: Failed to retrieve the latest tag."
            exit 1
        else
            echo "Latest tag is: $latest_tag"
        fi

        MASTER_VERSION=$latest_tag

        if [ -z "${MASTER_VERSION}" ] || [ "${MASTER_VERSION}" = "null" ]; then
          MASTER_VERSION="0.0.1"
        fi

        echo "\$MASTER_VERSION is set to: ${MASTER_VERSION}"

        VERSION="$MASTER_VERSION-$VERSION_PRERELEASE_KEYWORD${VERSION_PRERELEASE_KEYWORD:+-}$CI_COMMIT_REF_SLUG"
        # IMAGE_VERSION="$MASTER_VERSION-$VERSION_PRERELEASE_KEYWORD${VERSION_PRERELEASE_KEYWORD:+-}$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID"

        echo "VERSION=${VERSION}"
      else
        echo "Not a tag or merge request close event."
        exit 1
      fi
    - echo "$CONTAINER_REGISTRY_PUSH_PASSWORD" | buildah login -u "$CONTAINER_REGISTRY_PUSH_USERNAME" --password-stdin "$CONTAINER_REGISTRY_HOST"

    - |
      if [ -n "$BUILDAH_DOCKERFILE" ]; then
        buildah build -f "$BUILDAH_DOCKERFILE" -t "$CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION" $BUILDAH_CONTEXT
      else
        buildah build -t "$CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION" $BUILDAH_CONTEXT
      fi

    - buildah push "$CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION"
    - echo "VERSION=$VERSION" > version.env
    - echo "IMAGE_PATH=$CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION" >> version.env
    - echo $CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION
    - echo "IMAGE_VERSION=$VERSION" >> version.env
    - echo "BRANCH_VERSION=$VERSION" >> version.env
  artifacts:
    paths:
      - version.env


.publish-chart:
  stage: publish-chart
  image: $CONTAINER_REGISTRY_HOST/base/tools/deploy-toolbox:latest
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    CHART_DIR: helm/app
    GENERIC_ALIAS: app
    GRAPHQL_DEPLOYMENT_ALIAS: app
  script:
    - source version.env
    - if [ -z "$CHART_NAME" ]; then CHART_NAME="$(yq e ".name" $CHART_DIR/Chart.yaml)"; fi
    - yq e ".name = \"$CHART_NAME\"" -i $CHART_DIR/Chart.yaml
    - if [ "$CONTAINER_REPOSITORY" ]; then yq e ".${GENERIC_ALIAS}.image.repository = \"$CONTAINER_REPOSITORY\"" -i $CHART_DIR/values.yaml; fi
    - yq e ".${GENERIC_ALIAS}.image.registry = \"$CONTAINER_REGISTRY_HOST\"" -i $CHART_DIR/values.yaml
    - yq e ".${GENERIC_ALIAS}.image.tag = \"$IMAGE_VERSION\"" -i $CHART_DIR/values.yaml
    - yq e ".${GENERIC_ALIAS}.chart.name = \"$CHART_NAME\"" -i $CHART_DIR/values.yaml
    - yq e ".${GENERIC_ALIAS}.chart.version = \"$BRANCH_VERSION\"" -i $CHART_DIR/values.yaml
    # Enable GraphQL subgraph deployment
    - if [ "$GRAPHQL_SUBGRAPH_NAME" ]; then yq e ".${GRAPHQL_DEPLOYMENT_ALIAS}.cosmo.enabled = true" -i $CHART_DIR/values.yaml; fi
    - if [ "$GRAPHQL_SUBGRAPH_NAME" ]; then yq e ".${GRAPHQL_DEPLOYMENT_ALIAS}.cosmo.subgraphName = \"$GRAPHQL_SUBGRAPH_NAME\"" -i $CHART_DIR/values.yaml; fi
    - if [ "$GRAPHQL_SUBGRAPH_NAME" ]; then yq e ".${GRAPHQL_DEPLOYMENT_ALIAS}.cosmo.schemas.nexus.group = \"$GRAPHQL_SUBGRAPH_PATH\"" -i $CHART_DIR/values.yaml; fi
    - if [ "$GRAPHQL_SUBGRAPH_NAME" ]; then yq e ".${GRAPHQL_DEPLOYMENT_ALIAS}.cosmo.schemas.nexus.url = \"https://$NEXUS_HOST\"" -i $CHART_DIR/values.yaml; fi
    - if [ "$GRAPHQL_SUBGRAPH_NAME" ]; then yq e ".${GRAPHQL_DEPLOYMENT_ALIAS}.cosmo.schemas.nexus.repository = \"graphql\"" -i $CHART_DIR/values.yaml; fi
    - helm package "$CHART_DIR" --version="$BRANCH_VERSION" --dependency-update
    - helm registry login -u $HELM_REGISTRY_PUSH_USERNAME --password "$HELM_REGISTRY_PUSH_PASSWORD" "$HELM_REGISTRY_HOST"
    - helm push "${CHART_NAME}-${BRANCH_VERSION}.tgz" "oci://$HELM_REGISTRY_HOST/$HELM_REGISTRY_PATH"
