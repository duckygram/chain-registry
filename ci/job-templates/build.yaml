

.build-image:
  stage: build-image
  image: lorrodx/buildah-builder:latest
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      # If the pipeline is triggered by a tag, use the tag as the version
      # If the pipeline is triggered by a merge request, get the latest tag and use it as the version
      if [ -n "$CI_COMMIT_TAG" ]; then
      
        VERSION=$CI_COMMIT_TAG

        if [ -z "${VERSION}" ] || [ "${VERSION}" = "null" ]; then
          VERSION="0.0.1"
        fi
      
        echo "VERSION=${VERSION}"
      elif [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]; then
        # List all available tags for debugging purposes
        echo "Available tags (sorted by creation date):"
        git tag --sort=-creatordate
        
        # Attempt to retrieve the latest tag using a method that avoids SIGPIPE errors
        latest_tag=$(git for-each-ref --sort=-creatordate --count=1 --format='%(refname:short)' refs/tags)
        
        # Check if the command was successful and if a tag was found
        if [ $? -ne 0 ] || [ -z "$latest_tag" ]; then
            echo "Error: Failed to retrieve the latest tag."
            exit 1
        else
            echo "Latest tag is: $latest_tag"
        fi

        MASTER_VERSION=$latest_tag

        if [ -z "${MASTER_VERSION}" ] || [ "${MASTER_VERSION}" = "null" ]; then
          MASTER_VERSION="0.0.1"
        fi

        echo "\$MASTER_VERSION is set to: ${MASTER_VERSION}"

        VERSION="$MASTER_VERSION-$VERSION_PRERELEASE_KEYWORD${VERSION_PRERELEASE_KEYWORD:+-}$CI_COMMIT_REF_SLUG"
        # IMAGE_VERSION="$MASTER_VERSION-$VERSION_PRERELEASE_KEYWORD${VERSION_PRERELEASE_KEYWORD:+-}$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID"

        echo "VERSION=${VERSION}"
      else
        echo "Not a tag or merge request close event."
        exit 1
      fi
    - echo "$CONTAINER_REGISTRY_PUSH_PASSWORD" | buildah login -u "$CONTAINER_REGISTRY_PUSH_USERNAME" --password-stdin "$CONTAINER_REGISTRY_HOST"

    - |
      if [ -n "$BUILDAH_DOCKERFILE" ]; then
        buildah build -f "$BUILDAH_DOCKERFILE" -t "$CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION" $BUILDAH_CONTEXT
      else
        buildah build -t "$CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION" $BUILDAH_CONTEXT
      fi

    - buildah push "$CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION"
    - echo "VERSION=$VERSION" > version.env
    - echo "IMAGE_PATH=$CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION" >> version.env
    - echo $CONTAINER_REGISTRY_HOST/$CI_PROJECT_NAME:$VERSION
  artifacts:
    paths:
      - version.env
